package com.algo.trie

import scala.collection.mutable

object MainAddSearchWord extends App {
  val d = new WordDictionary()
  //  d.addWord("bad")
  //  d.addWord("dad")
  //  d.addWord("mad")
  //  println(d.search("pad"))// -> false
  //  println(d.search("bad"))// -> true
  //  println(d.search(".ad"))// -> true
  //  println(d.search("b.."))// -> true
  //  println(d.search("b.d"))// -> true
  //  println(d.search("b.a"))// -> false
  //  println(d.search("..d"))// -> true
  //  println(d.search("..a"))// -> false
  //  println(d.search("ba."))// -> false

  //  d.addWord("a")
  //  d.addWord("a")
  //  println(d.search("."))
  //  println(d.search("a"))
  //  println(d.search("aa"))
  //  println(d.search("a"))
  //  println(d.search(".a"))
  //  println(d.search("a."))

  //    d.addWord("at")
  //  d.addWord("and")
  //  d.addWord("an")
  //  d.addWord("add")
  ////  d.search("a")
  ////  d.search(".at")
  //  d.addWord("bat")
  //  println(d.search("a.d"))

  d.addWord("pourparler")
  d.addWord("prenumbering")
  d.addWord("pachysomia")
  d.addWord("profanely")
  d.addWord("preconfession")
  d.addWord("prestigiator")
  d.addWord("parenthesize")
  d.addWord("paxilliform")
  d.addWord("pastophorium")
  d.addWord("potherment")
  d.addWord("posthetomist")
  d.addWord("polyspermous")
  d.addWord("pillarist")
  d.addWord("painter")
  d.addWord("postnarial")
  d.addWord("perseverate")
  d.addWord("penetrability")
  d.addWord("philocaly")
  d.addWord("plurifacial")
  d.addWord("pugilant")
  d.addWord("pyodermic")
  d.addWord("pigmentize")
  d.addWord("pyrostereotype")
  d.addWord("pianolist")
  d.addWord("paction")
  d.addWord("pimpship")
  d.addWord("pentagon")
  d.addWord("productively")
  d.addWord("promotement")
  d.addWord("pompilid")
  d.addWord("plaintile")
  d.addWord("pulldevil")
  d.addWord("policemanlike")
  d.addWord("photophysicist")
  d.addWord("phalangidean")
  d.addWord("pankin")
  d.addWord("pounder")
  d.addWord("peaky")
  d.addWord("postphthisic")
  d.addWord("pannationalism")
  d.addWord("polyborine")
  d.addWord("possessingly")
  d.addWord("parametritis")
  d.addWord("plainbacks")
  d.addWord("promorphologist")
  d.addWord("prutah")
  d.addWord("palosapis")
  d.addWord("patent")
  d.addWord("pitiableness")
  d.addWord("peneseismic")
  d.addWord("paranematic")
  d.addWord("parisonic")
  d.addWord("pagoda")
  d.addWord("proteinic")
  d.addWord("pathobiological")
  d.addWord("prosecrecy")
  d.addWord("preworthily")
  d.addWord("penetrative")
  d.addWord("parlormaid")
  d.addWord("prat")
  d.addWord("pedipulator")
  d.addWord("photoreceptor")
  d.addWord("precompress")
  d.addWord("planispheral")
  d.addWord("polypharmacy")
  d.addWord("parrel")
  d.addWord("philopatrian")
  d.addWord("preadvocate")
  d.addWord("passionate")
  d.addWord("pteridospermous")
  d.addWord("polyphylly")
  d.addWord("penetrableness")
  d.addWord("picotah")
  d.addWord("paraldehyde")
  d.addWord("poaceous")
  d.addWord("pigeonwing")
  d.addWord("pargeter")
  d.addWord("pellation")
  d.addWord("penistone")
  d.addWord("possessor")
  d.addWord("photosensitiveness")
  d.addWord("preclose")
  d.addWord("polymathist")
  d.addWord("postclassicism")
  d.addWord("philographic")
  d.addWord("predirection")
  d.addWord("propertied")
  d.addWord("preliberate")
  d.addWord("parakeratosis")
  d.addWord("plastochondria")
  d.addWord("prepossessionary")
  d.addWord("peregrine")
  d.addWord("protohemipterous")
  d.addWord("polyandrism")
  d.addWord("peninsula")
  d.addWord("physicomorphism")
  d.addWord("polyneuric")
  d.addWord("perilously")
  d.addWord("pentarch")
  d.addWord("pupa")
  d.addWord("pronephridiostome")
  d.addWord("pupil")
  d.addWord("pseudosymmetry")
  d.addWord("perhorresce")
  d.addWord("pseudepiploic")
  d.addWord("photodysphoria")
  d.addWord("premankind")
  d.addWord("phoenixity")
  d.addWord("phthisiogenic")
  d.addWord("pharyngotherapy")
  d.addWord("perpetuana")
  d.addWord("patrocinium")
  d.addWord("permissively")
  d.addWord("polypi")
  d.addWord("partridging")
  d.addWord("protothecal")
  d.addWord("phonocinematograph")
  d.addWord("pneumatomorphic")
  d.addWord("preultimately")
  d.addWord("puzzleheadedness")
  d.addWord("pariah")
  d.addWord("prefixedly")
  d.addWord("pettily")
  d.addWord("pollinar")
  d.addWord("persecutive")
  d.addWord("polypragmatism")
  d.addWord("pantas")
  d.addWord("pleurisy")
  d.addWord("posteen")
  d.addWord("protozoean")
  d.addWord("pterocarpous")
  d.addWord("poltroonishly")
  d.addWord("phylogenetically")
  d.addWord("phenylenediamine")
  d.addWord("pressingness")
  d.addWord("princess")
  d.addWord("provostorial")
  d.addWord("plasmosome")
  d.addWord("polariscopy")
  d.addWord("plenteousness")
  d.addWord("proecclesiastical")
  d.addWord("pharyngalgic")
  d.addWord("pageful")
  d.addWord("porry")
  d.addWord("plunging")
  d.addWord("palmwood")
  d.addWord("phagedenic")
  d.addWord("polysomaty")
  d.addWord("peninsularism")
  d.addWord("petticoatism")
  d.addWord("puisne")
  d.addWord("pennatilobate")
  d.addWord("praisefulness")
  d.addWord("purvey")
  d.addWord("palaeohistology")
  d.addWord("photophore")
  d.addWord("profugate")
  d.addWord("pressurize")
  d.addWord("phonotypical")
  d.addWord("portgrave")
  d.addWord("predetestation")
  d.addWord("polarigraphic")
  d.addWord("preindustrial")
  d.addWord("peerlessness")
  d.addWord("proponent")
  d.addWord("pubis")
  d.addWord("perfumery")
  d.addWord("purler")
  d.addWord("praenarial")
  d.addWord("pollam")
  d.addWord("pretariff")
  d.addWord("phytotopographical")
  d.addWord("pectoriloquism")
  d.addWord("pantomimically")
  d.addWord("prewash")
  d.addWord("plasmotomy")
  d.addWord("presystole")
  d.addWord("provision")
  d.addWord("photoetch")
  d.addWord("postmedian")
  d.addWord("phaselin")
  d.addWord("probity")
  d.addWord("protozoacidal")
  d.addWord("pamphlet")
  d.addWord("pernicious")
  d.addWord("preworship")
  d.addWord("peatwood")
  d.addWord("pharmacography")
  d.addWord("protester")
  d.addWord("placability")
  d.addWord("potentiometric")
  d.addWord("perjury")
  d.addWord("praying")
  d.addWord("prayful")
  d.addWord("pugnaciousness")
  d.addWord("prevernal")
  d.addWord("pitchy")
  d.addWord("phytoplankton")
  d.addWord("perivisceritis")
  d.addWord("pleasureman")
  d.addWord("precipitated")
  d.addWord("plethorous")
  d.addWord("perspirable")
  d.addWord("psammophyte")
  d.addWord("pocketbook")
  d.addWord("photoinhibition")
  d.addWord("phaneromerous")
  d.addWord("pentyne")
  d.addWord("periphacitis")
  d.addWord("perforator")
  d.addWord("protozoiasis")
  d.addWord("parnorpine")
  d.addWord("postcommissure")
  d.addWord("papacy")
  d.addWord("print")
  d.addWord("proembryo")
  d.addWord("pugger")
  d.addWord("polio")
  d.addWord("pteridophytous")
  d.addWord("polysymmetry")
  d.addWord("phthalazine")
  d.addWord("plowmaker")
  d.addWord("pleopod")
  d.addWord("perijejunitis")
  d.addWord("punctulate")
  d.addWord("pistollike")
  d.addWord("preface")
  d.addWord("pinkfish")
  d.addWord("photochronographically")
  d.addWord("pseudomultiseptate")
  d.addWord("predispute")
  d.addWord("perimorph")
  d.addWord("poetly")
  d.addWord("palaeonemertine")
  d.addWord("probableness")
  d.addWord("pantheonize")
  d.addWord("peritrema")
  d.addWord("polyploid")
  d.addWord("prematureness")
  d.addWord("pluteal")
  d.addWord("palaeostylic")
  d.addWord("persymmetrical")
  d.addWord("predisplay")
  d.addWord("pleuritic")
  d.addWord("panspermist")
  d.addWord("pulvinule")
  d.addWord("pannicular")
  d.addWord("physiocratic")
  d.addWord("papaverous")
  d.addWord("pseudovolcano")
  d.addWord("polyadelphous")
  d.addWord("podostemonaceous")
  d.addWord("pilotman")
  d.addWord("pseudoconjugation")
  d.addWord("peeoy")
  d.addWord("paradoxer")
  d.addWord("pointways")
  d.addWord("protarsal")
  d.addWord("permanganate")
  d.addWord("parser")
  d.addWord("philosophizer")
  d.addWord("proarctic")
  d.addWord("pseudoservile")
  d.addWord("pictogram")
  d.addWord("pterylosis")
  d.addWord("pentit")
  d.addWord("partook")
  d.addWord("philosophistical")
  d.addWord("pavonated")
  d.addWord("protocaseose")
  d.addWord("palmaceous")
  d.addWord("phosphor")
  d.addWord("pyramides")
  d.addWord("pneumatochemistry")
  d.addWord("periotic")
  d.addWord("pratiloma")
  d.addWord("prosopoplegia")
  d.addWord("preflight")
  d.addWord("patronly")
  d.addWord("pupilate")
  d.addWord("poinding")
  d.addWord("planineter")
  d.addWord("patriarchate")
  d.addWord("palaeoeremology")
  d.addWord("propatriotic")
  d.addWord("privant")
  d.addWord("pneumonectomy")
  d.addWord("printless")
  d.addWord("perpetrator")
  d.addWord("psychomoral")
  d.addWord("pisachee")
  d.addWord("prefiguratively")
  d.addWord("psychagogos")
  d.addWord("planolindrical")
  d.addWord("paropsis")
  d.addWord("plasmatic")
  d.addWord("posteriors")
  d.addWord("plesiobiotic")
  d.addWord("plectopterous")
  d.addWord("protonegroid")
  d.addWord("pignoratitious")
  d.addWord("pygobranchiate")
  d.addWord("pend")
  d.addWord("preternaturalness")
  d.addWord("pinkeye")
  d.addWord("prefer")
  d.addWord("polysepalous")
  d.addWord("podsolization")
  d.addWord("preferentialism")
  d.addWord("peasticking")
  d.addWord("prefectual")
  d.addWord("pericardicentesis")
  d.addWord("precursive")
  d.addWord("paraffinize")
  d.addWord("publisher")
  d.addWord("present")
  d.addWord("plutarchy")
  d.addWord("premenstrual")
  d.addWord("prurigo")
  d.addWord("preimitative")
  d.addWord("pappox")
  d.addWord("predemand")
  d.addWord("pansexism")
  d.addWord("physiognomize")
  d.addWord("pamment")
  d.addWord("panzoism")
  d.addWord("playmaker")
  d.addWord("pilcrow")
  d.addWord("photographically")
  d.addWord("polladz")
  d.addWord("posteroclusion")
  d.addWord("pinnatipartite")
  d.addWord("petticoated")
  d.addWord("palander")
  d.addWord("penttail")
  d.addWord("premisory")
  d.addWord("presbyacousia")
  d.addWord("pastorium")
  d.addWord("polarimetry")
  d.addWord("paragon")
  d.addWord("phaeism")
  d.addWord("palaeentomology")
  d.addWord("petasos")
  d.addWord("pressroom")
  d.addWord("promitosis")
  d.addWord("preinstruction")
  d.addWord("preremuneration")
  d.addWord("phengite")
  d.addWord("plauditory")
  d.addWord("provoker")
  d.addWord("pedro")
  d.addWord("phthisicky")
  d.addWord("plastidule")
  d.addWord("perturbant")
  d.addWord("provenience")
  d.addWord("prededuction")
  d.addWord("polyglottous")
  d.addWord("polymasty")
  d.addWord("placatory")
  d.addWord("prover")
  d.addWord("pitheciine")
  d.addWord("progressivism")
  d.addWord("pneumonomelanosis")
  d.addWord("painkiller")
  d.addWord("pseudographize")
  d.addWord("placentiform")
  d.addWord("protopine")
  d.addWord("pregenerously")
  d.addWord("patagiate")
  d.addWord("preadjournment")
  d.addWord("prezygomatic")
  d.addWord("pentylidene")
  d.addWord("predental")
  d.addWord("panoplist")
  d.addWord("predetach")
  d.addWord("psychagogue")
  d.addWord("patible")
  d.addWord("polysilicic")
  d.addWord("pseudoclassicism")
  d.addWord("pinnigrade")
  d.addWord("pulpitarian")
  d.addWord("presentment")
  d.addWord("paleobotany")
  d.addWord("photoperiodic")
  d.addWord("palmospasmus")
  d.addWord("playgoer")
  d.addWord("pseudepiploon")
  d.addWord("postzygapophysis")
  d.addWord("phymatic")
  d.addWord("pretrace")
  d.addWord("prefoliation")
  d.addWord("paranasal")
  d.addWord("pharisaically")
  d.addWord("paradidymal")
  d.addWord("predistrict")
  d.addWord("preinsulate")
  d.addWord("prore")
  d.addWord("palilogy")
  d.addWord("pelycosaurian")
  d.addWord("poley")
  d.addWord("proassociation")
  d.addWord("phonetism")
  d.addWord("participatress")
  d.addWord("preduplicate")
  d.addWord("poring")
  d.addWord("practicalism")
  d.addWord("paleethnology")
  d.addWord("passionateness")
  d.addWord("precatory")
  d.addWord("phototachometer")
  d.addWord("polypiferous")
  d.addWord("pentathlos")
  d.addWord("preobedient")
  d.addWord("porulous")
  d.addWord("proctitis")
  d.addWord("perionychium")
  d.addWord("pleiobar")
  d.addWord("perfervidly")
  d.addWord("porosis")
  d.addWord("pulpboard")
  d.addWord("perfervid")
  d.addWord("peak")
  d.addWord("photomontage")
  d.addWord("preservative")
  d.addWord("prognathism")
  d.addWord("pterylological")
  d.addWord("polygonous")
  d.addWord("perfidiousness")
  d.addWord("preactive")
  d.addWord("prestigiously")
  d.addWord("protocone")
  d.addWord("protochlorophyll")
  d.addWord("psalterist")
  d.addWord("pipestapple")
  d.addWord("pluggy")
  d.addWord("phrenomesmerism")
  d.addWord("preservationist")
  d.addWord("physicomedical")
  d.addWord("prolepsis")
  d.addWord("paxillar")
  d.addWord("phytosociology")
  d.addWord("philhellenist")
  d.addWord("pseudomilitarist")
  d.addWord("phonophile")
  d.addWord("prickseam")
  d.addWord("pitarah")
  d.addWord("pseudomucin")
  d.addWord("predine")
  d.addWord("prelabial")
  d.addWord("profluence")
  d.addWord("pancreatolipase")
  d.addWord("professionalize")
  d.addWord("paragastral")
  d.addWord("paramountcy")
  d.addWord("porokeratosis")
  d.addWord("pistillody")
  d.addWord("permutation")
  d.addWord("placewoman")
  d.addWord("parodial")
  d.addWord("poppycock")
  d.addWord("patesi")
  d.addWord("platyglossal")
  d.addWord("pathematically")
  d.addWord("prefecundation")
  d.addWord("penneech")
  d.addWord("pectinose")
  d.addWord("pruning")
  d.addWord("polisher")
  d.addWord("palatitis")
  d.addWord("physiatrics")
  d.addWord("postbaptismal")
  d.addWord("precaution")
  d.addWord("projector")
  d.addWord("postil")
  d.addWord("palaeotypic")
  d.addWord("psychotechnical")
  d.addWord("palpably")
  d.addWord("plessimetry")
  d.addWord("postseason")
  d.addWord("powdered")
  d.addWord("peripneumony")
  d.addWord("patronize")
  d.addWord("panicled")
  d.addWord("postmistress")
  d.addWord("predominate")
  d.addWord("pregnability")
  d.addWord("pusher")
  d.addWord("paedatrophy")
  d.addWord("ploration")
  d.addWord("paranthracene")
  d.addWord("proelimination")
  d.addWord("physiosociological")
  d.addWord("plaguily")
  d.addWord("paleodendrology")
  d.addWord("phylarchical")
  d.addWord("permalloy")
  d.addWord("pyxie")
  d.addWord("plastidium")
  d.addWord("parenchymatitis")
  d.addWord("phleborrhage")
  d.addWord("primitiae")

//  d.addWord("promorphologist")
//  d.addWord("palosapis")
//  d.addWord("precompress")
//  d.addWord("planispheral")
//  d.addWord("pseudepiploic")
//  d.addWord("psammophyte")
//  d.addWord("parnorpine")
//  d.addWord("predispute")
//  d.addWord("predisplay")
//  d.addWord("plectopterous")
//  d.addWord("polysepalous")
//  d.addWord("palmospasmus")
//  d.addWord("pseudepiploon")
//  d.addWord("postbaptismal")

  d.printRoot()
  println(d.search("p.....p..."))

}

class WordDictionary() {

  /** Initialize your data structure here. */
  private case class TrieNode(endOfWord: Boolean, childCharNodes: Map[Char, TrieNode])

  private var root: Option[TrieNode] = None

  def printRoot(): Unit =
    println(root)

  /** Adds a word into the data structure. */
  def addWord(word: String) {
    def buildTrieNode(index: Int, existingChild: Option[TrieNode]): TrieNode = {
      if (index == word.length) {
        existingChild match {
          case Some(c) => c.copy(endOfWord = true)
          case None => TrieNode(endOfWord = true, Map.empty)
        }
      } else if (index == 0) {
        root match {
          case Some(r) =>
            val node = r.childCharNodes.get(word(index))
            r.copy(childCharNodes = r.childCharNodes + (word(index) -> buildTrieNode(index + 1, node)))
          case None =>
            TrieNode(endOfWord = false, Map(word(index) -> buildTrieNode(index + 1, existingChild)))
        }
      } else {
        val node = existingChild.flatMap(_.childCharNodes.get(word(index)))
        existingChild match {
          case Some(c) =>
            c.copy(childCharNodes = c.childCharNodes + (word(index) -> buildTrieNode(index + 1, node)))
          case None =>
            TrieNode(endOfWord = false, Map(word(index) -> buildTrieNode(index + 1, node)))
        }
      }
    }

    root = Option(buildTrieNode(0, None))
    //println(root)
  }

  /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
  def search(word: String): Boolean = {
    val stack: mutable.Stack[(Int, Map[Char, TrieNode])] = new mutable.Stack[(Int, Map[Char, TrieNode])]()

    @scala.annotation.tailrec
    def sr(index: Int, trieNode: TrieNode, charStack: mutable.Stack[(Int, Map[Char, TrieNode])]): Boolean = {
      if (index == word.length) {
        if(trieNode.endOfWord) {
//          println("endofword, endoftrie")
          true
        } else if (charStack.isEmpty) {
//          println("endofword, endofstack")
          false
        } else {
          val (backTrackToIndex, backTrackToCharMap) = charStack.pop()
          backTrackToCharMap.headOption match {
            case Some(childNode) =>
              val updatedCharStack =
                if (backTrackToCharMap.tail.isEmpty) charStack else charStack.push((backTrackToIndex, backTrackToCharMap.tail))
              sr(backTrackToIndex + 1, childNode._2, updatedCharStack)
            case None =>
//              println("here1")
              false
          }
        }
      } else if (trieNode.childCharNodes.isEmpty) {
        if (charStack.nonEmpty) {
          val (backTrackToIndex, backTrackToCharMap) = charStack.pop()
          backTrackToCharMap.headOption match {
            case Some(childNode) =>
              val updatedCharStack =
                if (backTrackToCharMap.tail.isEmpty) charStack else charStack.push((backTrackToIndex, backTrackToCharMap.tail))
              sr(backTrackToIndex + 1, childNode._2, updatedCharStack)
            case None =>
//              println("here2")
              false
          }
        } else false
      } else {
        if (word(index) == '.') {
          val updatedCharStack =
            if (trieNode.childCharNodes.tail.isEmpty) charStack else charStack.push((index, trieNode.childCharNodes.tail))
          val childNode: (Char, TrieNode) = trieNode.childCharNodes.head
          sr(index + 1, childNode._2, updatedCharStack)
        } else {
          trieNode.childCharNodes.get(word(index)) match {
            case Some(childNode) => sr(index + 1, childNode, charStack)
            case None =>
              if (charStack.nonEmpty) {
                val (backTrackToIndex, backTrackToCharMap) = charStack.pop()
                backTrackToCharMap.headOption match {
                  case Some(childNode) =>
                    val updatedCharStack =
                      if (backTrackToCharMap.tail.isEmpty) charStack else charStack.push((backTrackToIndex, backTrackToCharMap.tail))
                    sr(backTrackToIndex + 1, childNode._2, updatedCharStack)
                  case None =>
//                    println("here3")
                    false
                }
              } else {
//                println("here4")
                false
              }
          }
        }
      }
    }

    root match {
      case Some(r) => sr(0, r, stack)
      case None => false
    }
  }

}
